[{"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\styles\\global.ts":"1","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\index.tsx":"2","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Modal\\index.tsx":"3","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\styles.ts":"4","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\index.tsx":"5","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\styles.ts":"6","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\index.tsx":"7","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\styles.ts":"8","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\index.tsx":"9","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\index.tsx":"10"},{"size":391,"mtime":1610470333517,"results":"11","hashOfConfig":"12"},{"size":2316,"mtime":1610676770293,"results":"13","hashOfConfig":"14"},{"size":1241,"mtime":1610556362225,"results":"15","hashOfConfig":"14"},{"size":2113,"mtime":1610598427961,"results":"16","hashOfConfig":"12"},{"size":5622,"mtime":1610676370266,"results":"17","hashOfConfig":"14"},{"size":1476,"mtime":1610551503905,"results":"18","hashOfConfig":"12"},{"size":1466,"mtime":1610648062851,"results":"19","hashOfConfig":"12"},{"size":536,"mtime":1610667256565,"results":"20","hashOfConfig":"14"},{"size":738,"mtime":1610675459540,"results":"21","hashOfConfig":"14"},{"size":912,"mtime":1610675730819,"results":"22","hashOfConfig":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zuss1q",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"say7pt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\styles\\global.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\index.tsx",["44","45","46"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Modal\\index.tsx",["47","48"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\index.tsx",["49","50","51","52"],"import React, { FormEvent, useCallback, useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport apiJson from '../../services/apiJson';\n\nimport {\n  Header,\n  Container,\n  SubNav,\n  Label,\n  Select,\n  Input,\n  Input2,\n  ButtonAdd,\n  CardsContainer,\n  Form,\n} from './styles';\n\nimport logoImg from '../../assets/logoclubpetro.svg';\nimport Card from '../../components/Card/index';\nimport ModalEditCountry from '../../components/ModalEditCountry';\n\ninterface ICountry {\n  id?: string;\n  name: string;\n  flag: string;\n  // br: Translate;\n  translations?: string;\n}\n\ninterface ICountryJson {\n  id: number;\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n  // -\n}\n\nconst Dashboard: React.FC = () => {\n  const [countrySelected, setCountrySelected] = useState('');\n  const [\n    countrySelectedEditForm,\n    setCountrySelectedEditForm,\n  ] = useState<ICountryJson>();\n  const [countries, setCountries] = useState<ICountry[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editingCountry, setEditingCountry] = useState<ICountryJson>(\n    {} as ICountryJson,\n  );\n  const [databaseCountries, setDatabaseCountries] = useState<ICountryJson[]>(\n    [],\n  );\n  const [local, setLocal] = useState(editingCountry.local);\n  const [meta, setMeta] = useState(editingCountry.meta);\n\n  useEffect(() => {\n    api.get('/all').then(response => {\n      const array = response.data.map(\n        (item: {\n          name: string;\n          flag: string;\n          translations: { br: string };\n        }) => {\n          return {\n            name: item.name,\n            flag: item.flag,\n            translations: item.translations.br,\n          };\n        },\n      );\n      setCountries(array);\n    });\n\n    loadCountries();\n  }, []);\n\n  async function handleAddCrountry(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    const data = countries.filter(item => item.name === countrySelected);\n    const { flag, translations: translation } = data[0];\n\n    await apiJson.post('/add', {\n      name: countrySelected,\n      local,\n      meta,\n      flag,\n      translation,\n    });\n    await loadCountries();\n  }\n\n  async function handleUpdateCountry(country: ICountryJson): Promise<void> {\n    try {\n      console.log('UPDATE', country);\n      const response = await apiJson.put(`/add/${editingCountry.id}`, {\n        ...editingCountry,\n        ...country,\n      });\n      setDatabaseCountries(\n        databaseCountries.map(mappedCountry =>\n          mappedCountry.id === editingCountry.id\n            ? { ...response.data }\n            : mappedCountry,\n        ),\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function loadCountries(): Promise<void> {\n    const response = await apiJson.get('/add');\n    setDatabaseCountries(response.data);\n  }\n\n  async function handleDeleteCountry(id: number): Promise<void> {\n    try {\n      await apiJson.delete(`/add/${id}`);\n\n      setDatabaseCountries(\n        databaseCountries.filter(country => country.id !== id),\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function handleEditCountry(country: ICountryJson): void {\n    setEditingCountry(country);\n    toggleEditModal();\n  }\n\n  function toggleModal(countrySel: ICountryJson): void {\n    setModalOpen(!modalOpen);\n    setCountrySelectedEditForm(countrySel);\n  }\n\n  function toggleEditModal(): void {\n    setModalOpen(false);\n    loadCountries();\n  }\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Logo\" />\n      </Header>\n\n      <Container>\n        <ModalEditCountry\n          isOpen={modalOpen}\n          setIsOpen={toggleEditModal}\n          handleUpdateCountry={handleUpdateCountry}\n          editingCountry={countrySelectedEditForm}\n          countries={countries}\n        />\n        <SubNav>\n          <Form onSubmit={handleAddCrountry}>\n            <div>\n              <Label>País</Label>\n              <Select\n                onChange={event => setCountrySelected(event.target.value)}\n              >\n                <option value=\"\" disabled selected>\n                  Selecione ...\n                </option>\n                {countries.map(country => (\n                  <option key={country.name} value={country.name}>\n                    {country.translations}\n                  </option>\n                ))}\n              </Select>\n            </div>\n            <div>\n              <Label>Local</Label>\n              <Input\n                name=\"local\"\n                value={local}\n                type=\"text\"\n                placeholder=\"Defina o local que deseja conhecer\"\n                onChange={event => setLocal(event.target.value)}\n              />\n            </div>\n\n            <div>\n              <Label>Meta</Label>\n              <Input2\n                name=\"meta\"\n                value={meta}\n                type=\"text\"\n                placeholder=\"mês/ano\"\n                onChange={event => setMeta(event.target.value)}\n              />\n            </div>\n            <ButtonAdd type=\"submit\">Adicionar</ButtonAdd>\n          </Form>\n        </SubNav>\n        <CardsContainer>\n          {databaseCountries &&\n            databaseCountries.map(country => (\n              <Card\n                openModal={() => toggleModal(country)}\n                key={country.id}\n                country={country}\n                handleEditCountry={handleEditCountry}\n                handleDeleteCountry={handleDeleteCountry}\n              />\n            ))}\n        </CardsContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default Dashboard;\n","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\index.tsx",["53"],{"ruleId":"54","severity":1,"message":"55","line":2,"column":38,"nodeType":"56","messageId":"57","endLine":2,"endColumn":46},{"ruleId":"54","severity":1,"message":"58","line":48,"column":3,"nodeType":"56","messageId":"57","endLine":48,"endColumn":12},{"ruleId":"59","severity":1,"message":"60","line":61,"column":7,"nodeType":"61","messageId":"62","endLine":61,"endColumn":18},{"ruleId":"54","severity":1,"message":"63","line":6,"column":11,"nodeType":"56","messageId":"57","endLine":6,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":17,"column":13,"nodeType":"66","messageId":"67","endLine":17,"endColumn":16,"suggestions":"68"},{"ruleId":"54","severity":1,"message":"69","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":39},{"ruleId":"59","severity":1,"message":"60","line":98,"column":7,"nodeType":"61","messageId":"62","endLine":98,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":111,"column":7,"nodeType":"61","messageId":"62","endLine":111,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":128,"column":7,"nodeType":"61","messageId":"62","endLine":128,"endColumn":18},{"ruleId":"64","severity":1,"message":"65","line":23,"column":21,"nodeType":"66","messageId":"67","endLine":23,"endColumn":24,"suggestions":"70"},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'countries' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'ICountry' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["71","72"],"'useCallback' is defined but never used.",["73","74"],{"messageId":"75","fix":"76","desc":"77"},{"messageId":"78","fix":"79","desc":"80"},{"messageId":"75","fix":"81","desc":"77"},{"messageId":"78","fix":"82","desc":"80"},"suggestUnknown",{"range":"83","text":"84"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"83","text":"85"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"86","text":"84"},{"range":"86","text":"85"},[302,305],"unknown","never",[647,650]]