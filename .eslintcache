[{"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\App.tsx":"1","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\pages\\Dashboard\\index.tsx":"2","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\index.tsx":"3","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\pages\\Dashboard\\styles.ts":"4","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\styles\\global.ts":"5","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\routes\\index.tsx":"6","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\services\\api.ts":"7","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\services\\apiJson.ts":"8","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\ModalEditCountry\\index.tsx":"9","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\ModalEditCountry\\styles.ts":"10","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\Card\\index.tsx":"11","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\Modal\\index.tsx":"12"},{"size":295,"mtime":1610390449959,"results":"13","hashOfConfig":"14"},{"size":5583,"mtime":1610580580188,"results":"15","hashOfConfig":"14"},{"size":198,"mtime":1610389797949,"results":"16","hashOfConfig":"17"},{"size":2658,"mtime":1610553754574,"results":"18","hashOfConfig":"14"},{"size":391,"mtime":1610470333517,"results":"19","hashOfConfig":"17"},{"size":251,"mtime":1610389543557,"results":"20","hashOfConfig":"17"},{"size":127,"mtime":1610485347015,"results":"21","hashOfConfig":"14"},{"size":116,"mtime":1610485368494,"results":"22","hashOfConfig":"14"},{"size":3447,"mtime":1610593512982,"results":"23","hashOfConfig":"14"},{"size":1912,"mtime":1610562912331,"results":"24","hashOfConfig":"14"},{"size":1207,"mtime":1610573442588,"results":"25","hashOfConfig":"14"},{"size":1241,"mtime":1610556362225,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zyb5cp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"61knrv",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\App.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\pages\\Dashboard\\index.tsx",["54","55","56","57","58","59"],"import React, { FormEvent, useCallback, useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport apiJson from '../../services/apiJson';\n\nimport {\n  Header,\n  Container,\n  SubNav,\n  Label,\n  Select,\n  Input,\n  Input2,\n  ButtonAdd,\n  CardsContainer,\n  Form,\n} from './styles';\n\nimport logoImg from '../../assets/logoclubpetro.svg';\nimport Card from '../../components/Card/index';\nimport ModalEditCountry from '../../components/ModalEditCountry';\n// import { Container } from './styles';\n// interface Translate {\n//   br: string;\n// }\n\ninterface ICountry {\n  id?: string;\n  name: string;\n  flag: string;\n  // br: Translate;\n  translations?: string;\n}\n\ninterface ICountryJson {\n  id: number;\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n  // -\n}\n\nconst Dashboard: React.FC = () => {\n  const [countrySelected, setCountrySelected] = useState('');\n  const [\n    countrySelectedEditForm,\n    setCountrySelectedEditForm,\n  ] = useState<ICountryJson>();\n  const [countries, setCountries] = useState<ICountry[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [editingCountry, setEditingCountry] = useState<ICountryJson>(\n    {} as ICountryJson,\n  );\n  const [databaseCountries, setDatabaseCountries] = useState<ICountryJson[]>(\n    [],\n  );\n  const [local, setLocal] = useState('');\n  const [meta, setMeta] = useState('');\n\n  useEffect(() => {\n    api.get('/all').then(response => {\n      const array = response.data.map(\n        (item: {\n          name: string;\n          flag: string;\n          translations: { br: string };\n        }) => {\n          return {\n            name: item.name,\n            flag: item.flag,\n            translations: item.translations.br,\n          };\n        },\n      );\n      setCountries(array);\n    });\n\n    loadCountries();\n  }, []);\n\n  async function handleAddCrountry(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    const data = countries.filter(item => item.name === countrySelected);\n    const { flag, translations: translation } = data[0];\n\n    await apiJson.post('/add', {\n      name: countrySelected,\n      local,\n      meta,\n      flag,\n      translation,\n    });\n    await loadCountries();\n  }\n\n  async function handleUpdateCountry(\n    country: Omit<ICountryJson, 'id' | 'available'>,\n  ): Promise<void> {\n    try {\n      const response = await api.put(`/add/${editingCountry.id}`, {\n        ...editingCountry,\n        ...country,\n      });\n      setDatabaseCountries(\n        databaseCountries.map(mappedCountry =>\n          mappedCountry.id === editingCountry.id\n            ? { ...response.data }\n            : mappedCountry,\n        ),\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function loadCountries(): Promise<void> {\n    const response = await apiJson.get('/add');\n    setDatabaseCountries(response.data);\n  }\n\n  async function handleDeleteCountry(id: number): Promise<void> {\n    try {\n      await apiJson.delete(`/add/${id}`);\n\n      setDatabaseCountries(\n        databaseCountries.filter(country => country.id !== id),\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function toggleModal(countrySel: ICountryJson): void {\n    setModalOpen(!modalOpen);\n    setCountrySelectedEditForm(countrySel);\n  }\n\n  function toggleEditModal(): void {\n    // setEditModalOpen(!editModalOpen);\n    setModalOpen(false);\n    loadCountries();\n  }\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Logo\" />\n      </Header>\n\n      <ModalEditCountry\n        isOpen={modalOpen}\n        setIsOpen={toggleEditModal}\n        handleUpdateCountry={handleUpdateCountry}\n        editingCountry={countrySelectedEditForm}\n        countries={countries}\n      />\n\n      <Container>\n        <SubNav>\n          <Form onSubmit={handleAddCrountry}>\n            <div>\n              <Label>País</Label>\n              <Select\n                onChange={event => setCountrySelected(event.target.value)}\n              >\n                <option value=\"\" disabled selected>\n                  Selecione ...\n                </option>\n                {countries.map(country => (\n                  <option key={country.name} value={country.name}>\n                    {country.translations}\n                  </option>\n                ))}\n              </Select>\n            </div>\n            <div>\n              <Label>Local</Label>\n              <Input\n                name=\"local\"\n                value={local}\n                type=\"text\"\n                placeholder=\"Defina o local que deseja conhecer\"\n                onChange={event => setLocal(event.target.value)}\n              />\n            </div>\n\n            <div>\n              <Label>Meta</Label>\n              <Input2\n                name=\"meta\"\n                value={meta}\n                type=\"text\"\n                placeholder=\"mês/ano\"\n                onChange={event => setMeta(event.target.value)}\n              />\n            </div>\n            <ButtonAdd type=\"submit\">Adicionar</ButtonAdd>\n          </Form>\n        </SubNav>\n        <CardsContainer>\n          {databaseCountries &&\n            databaseCountries.map(country => (\n              <Card\n                openModal={() => toggleModal(country)}\n                key={country.id}\n                country={country}\n                handleDeleteCountry={handleDeleteCountry}\n              />\n            ))}\n        </CardsContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default Dashboard;\n","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\pages\\Dashboard\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\styles\\global.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\routes\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\services\\api.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\services\\apiJson.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\ModalEditCountry\\index.tsx",["60","61","62","63","64","65","66"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useCallback, useRef, useState } from 'react';\nimport { FormHandles } from '@unform/core';\nimport { FiCheckSquare } from 'react-icons/fi';\nimport Modal from '../Modal';\nimport { Form, Input, Select, Label } from './styles';\nimport api from '../../services/apiJson';\n\ninterface ICountry {\n  id: number;\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n}\n\ninterface IEditCountryData {\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n}\n\ninterface IEditCountryDataSelect {\n  id?: string;\n  name: string;\n  flag: string;\n  translations?: string;\n}\n\ninterface IModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n  handleUpdateCountry: (country: Omit<ICountry, 'id' | 'available'>) => void;\n  editingCountry: ICountry | undefined;\n  countries: IEditCountryDataSelect[];\n}\n\nconst ModalEditCountry: React.FC<IModalProps> = ({\n  isOpen,\n  setIsOpen,\n  editingCountry,\n  handleUpdateCountry,\n  countries,\n}: IModalProps) => {\n  const formRef = useRef<FormHandles>(null);\n  const [countrySelected, setCountrySelected] = useState('');\n  const [dataCountry, setDataCountry] = useState<IEditCountryData | undefined>(\n    editingCountry,\n  );\n  console.log('OBJETO DATA', editingCountry);\n\n  const [local, setLocal] = useState(editingCountry?.local);\n  const [meta, setMeta] = useState(editingCountry?.meta);\n\n  const handleSubmit = useCallback(\n    async (data: IEditCountryData) => {\n      // EDIT A FOOD PLATE AND CLOSE THE MODAL\n      handleUpdateCountryJsonApi(data);\n      setIsOpen();\n    },\n    [handleUpdateCountryJsonApi, setIsOpen],\n  );\n\n  async function handleUpdateCountryJsonApi(\n    country: Omit<ICountry, 'id' | 'available'>,\n  ): Promise<void> {\n    try {\n      const response = await api.put(`/add/${editingCountry?.id}`, {\n        meta,\n        local,\n        name: editingCountry?.name,\n        flag: countrySelected,\n      });\n      console.log(response);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      <Form ref={formRef} onSubmit={handleSubmit} initialData={editingCountry}>\n        <h1>Editar</h1>\n        <div>\n          <Label>País</Label>\n          <Select onChange={event => setCountrySelected(event.target.value)}>\n            <option value={editingCountry?.translation} selected>\n              {editingCountry?.translation}\n            </option>\n            {countries.map(country => (\n              <option key={country.name} value={country.name}>\n                {country.translations}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <Input\n          name=\"local\"\n          value={local}\n          defaultValue={editingCountry?.local}\n          onChange={event => setLocal(event.target.value)}\n        />\n        <Input\n          name=\"meta\"\n          placeholder=\"mês/ano\"\n          defaultValue={editingCountry?.meta}\n          value={meta}\n          onChange={event => setMeta(event.target.value)}\n        />\n\n        <button\n          type=\"submit\"\n          data-testid=\"edit-country-button\"\n          onClick={() => handleSubmit}\n        >\n          <div className=\"text\">Editar</div>\n          <div className=\"icon\">\n            <FiCheckSquare size={24} />\n          </div>\n        </button>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ModalEditCountry;\n","D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\ModalEditCountry\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\Card\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpreto\\src\\components\\Modal\\index.tsx",["67","68"],"import React, { useEffect, useState } from 'react';\n\n// import { Container } from './styles';\nimport ReactModal from 'react-modal';\n\ninterface ICountry {\n  id: number;\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n  // -\n}\n\ninterface IModalProps {\n  children: any;\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\nconst Modal: React.FC<IModalProps> = ({\n  children,\n  isOpen,\n  setIsOpen,\n}: IModalProps) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <ReactModal\n      isOpen={modalStatus}\n      shouldCloseOnOverlayClick={!false}\n      ariaHideApp={false}\n      onRequestClose={setIsOpen}\n      style={{\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)',\n          background: '#F0F0F5',\n          color: '#000000',\n          borderRadius: '8px',\n          width: '736px',\n          border: 'none',\n        },\n        overlay: {\n          backgroundColor: '#121214e6',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n",{"ruleId":"69","severity":1,"message":"70","line":1,"column":28,"nodeType":"71","messageId":"72","endLine":1,"endColumn":39},{"ruleId":"69","severity":1,"message":"73","line":52,"column":10,"nodeType":"71","messageId":"72","endLine":52,"endColumn":23},{"ruleId":"69","severity":1,"message":"74","line":52,"column":25,"nodeType":"71","messageId":"72","endLine":52,"endColumn":41},{"ruleId":"69","severity":1,"message":"75","line":53,"column":26,"nodeType":"71","messageId":"72","endLine":53,"endColumn":43},{"ruleId":"76","severity":1,"message":"77","line":117,"column":7,"nodeType":"78","messageId":"79","endLine":117,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":134,"column":7,"nodeType":"78","messageId":"79","endLine":134,"endColumn":18},{"ruleId":"69","severity":1,"message":"80","line":45,"column":3,"nodeType":"71","messageId":"72","endLine":45,"endColumn":22},{"ruleId":"69","severity":1,"message":"81","line":50,"column":10,"nodeType":"71","messageId":"72","endLine":50,"endColumn":21},{"ruleId":"69","severity":1,"message":"82","line":50,"column":23,"nodeType":"71","messageId":"72","endLine":50,"endColumn":37},{"ruleId":"76","severity":1,"message":"77","line":53,"column":3,"nodeType":"78","messageId":"79","endLine":53,"endColumn":14},{"ruleId":"69","severity":1,"message":"83","line":68,"column":5,"nodeType":"71","messageId":"72","endLine":68,"endColumn":48},{"ruleId":"76","severity":1,"message":"77","line":77,"column":7,"nodeType":"78","messageId":"79","endLine":77,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":79,"column":7,"nodeType":"78","messageId":"79","endLine":79,"endColumn":18},{"ruleId":"69","severity":1,"message":"84","line":6,"column":11,"nodeType":"71","messageId":"72","endLine":6,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":17,"column":13,"nodeType":"87","messageId":"88","endLine":17,"endColumn":16,"suggestions":"89"},"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'editModalOpen' is assigned a value but never used.","'setEditModalOpen' is assigned a value but never used.","'setEditingCountry' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'handleUpdateCountry' is defined but never used.","'dataCountry' is assigned a value but never used.","'setDataCountry' is assigned a value but never used.","'country' is defined but never used.","'ICountry' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["90","91"],{"messageId":"92","fix":"93","desc":"94"},{"messageId":"95","fix":"96","desc":"97"},"suggestUnknown",{"range":"98","text":"99"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"98","text":"100"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[302,305],"unknown","never"]